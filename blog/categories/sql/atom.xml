<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sql | fmhub]]></title>
  <link href="http://fma2.github.io/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://fma2.github.io/"/>
  <updated>2014-08-23T20:11:51-04:00</updated>
  <id>http://fma2.github.io/</id>
  <author>
    <name><![CDATA[Farheen Malik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[optimizing sql queries]]></title>
    <link href="http://fma2.github.io/blog/2014/06/07/wk-7-technical-optimizing-sql-queries/"/>
    <updated>2014-06-07T18:56:13-04:00</updated>
    <id>http://fma2.github.io/blog/2014/06/07/wk-7-technical-optimizing-sql-queries</id>
    <content type="html"><![CDATA[<p>This post will discuss ways to optimize SQL queries. I will limit it to SQL query optimization options within my current scope of understanding of SQL syntax in an effort to apply the tips as soon as possible. However, I should note that, when researching the topic, I found various other SQL query optimization suggestions.</p>


<p>SQL query optimization is important for better performance. A query is a request for information from a database. Database structures are complex, so it is not surprising that &#8220;the needed data for a query can be collected from a database by accessing it in different ways, through different data-structures, and in different orders&#8221;<sup>1</sup>&#8211;this is performed through SQL statements. What can change with different SQL statements is processing time. Query optimization is meant to &#8220;find the way to process a given query in minimum time&#8221;<sup>1</sup>. Why optimize SQL queries? ServerWatch argues, &#8220;Time is money and people don&#8217;t like to wait so programs are expected to be fast&#8221;<sup>2</sup>.</p>


<p>Here are two approaches to optimize your SQL queries with a few examples of each in practice&#8211;</p>




<h2>APPROACH #1: ONLY QUERY WHAT YOU REALLY NEED</h2>




<p><u><font face="roboto slab" color="#666666">Use the actual column names in SELECT statements instead of &#8216;*&#8217;</font></u>. &#8220;This is, hands-down, the biggest, baddest SQL optimization violation out there. If you considered &#8220;SELECT *&#8221; to be off limits in your applications, I bet that would clear up a sizable chunk of the SQL problems that applications have&#8221;<sup>3</sup>
</p>




<h3>
    <font face="roboto slab" color="#666666" size="3">BAD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT *
    <br>FROM users;
</p>


<h3>
    <font face="roboto slab" color="#666666" size="3">GOOD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT id, first_name, last_name, age
    <br>FROM users;
</p>




<p><u><font face="roboto slab" color="#666666">Be careful with conditions in the WHERE clause</font></u>. Write it according to what you need/what you want.
</p>




<h3>
    <font face="roboto slab" color="#666666" size="3">BAD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT id, first name, last_name, age
    <br>FROM users
    <br>WHERE age != 10;
</p>


<h3>
    <font face="roboto slab" color="#666666" size="3">GOOD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT id, first name, last_name, age
    <br>FROM users
    <br>WHERE age > 10;
</p>




<h3>
    <font face="roboto slab" color="#666666" size="3">BAD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT id, first_name, age
    <br>FROM student_details
    <br>WHERE SUBSTR(first_name,1,3) = &#8216;Cha&#8217;;
</p>


<h3>
    <font face="roboto slab" color="#666666" size="3">GOOD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT id, first_name, age
    <br>FROM users
    <br>WHERE first_name LIKE &#8216;Chan%&#8217;;
</p>




<p><u><font face="roboto slab" color="#666666">Use the HAVING clause appropriately</font></u>. It is used to filter the rows after allthe rows are selected; if you do not need to do this, then you do not need a HAVING clause <sup>4</sup>
</p>




<h3>
    <font face="roboto slab" color="#666666" size="3">BAD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT subject, count(subject)
    <br>FROM student_details
    <br>GROUP BY subject
    <br>HAVING subject!= &#8216;Vancouver&#8217; AND subject!= &#8216;Toronto&#8217;;
</p>


<h3>
    <font face="roboto slab" color="#666666" size="3">GOOD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT subject, count(subject) FROM student_details
    <br>WHERE subject != &#8216;Science&#8217;
    <br>AND subject != &#8216;Maths&#8217;
    <br>GROUP BY subject;
</p>




<h2>APPROACH #2: CONSIDER HOW DIFFERENT OPERATORS WORK/WHAT OPERATORS ARE APPROPRIATE</h2>




<p><u><font face="roboto slab" color="#666666">Use operator EXISTS, IN,and table joins appropriately in your query</font></u>. &#8220;Usually, IN has the slowest performance. IN is efficient when most of the filter criteria is in the sub-query. EXISTS is efficient when most of the filter criteria is in the main query.&#8221;<sup>4</sup>
</p>




<h3>
    <font face="roboto slab" color="#666666" size="3">BAD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT *
    <br>FROM product p
    <br>WHERE product_id IN (SELECT product_id FROM order_items)
</p>


<h3>
    <font face="roboto slab" color="#666666" size="3">GOOD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT *
    <br>FROM product p
    <br>WHERE EXISTS (SELECT * from order_items o
    <br>WHERE o.product_id = p.product_id)
</p>




<p><u> <font face="roboto slab" color="#666666">Try not to use the NOT operator.</font></u> It is much faster to search for an exact match using the LIKE, IN, EXIST or = symbol operator (positive operators) instead of NOT LIKE, NOT IN, NOT EXIST or != symbol (negative operators). A negative operator will &#8220;cause the search to find every single row&#8221; whereas the positive operator stops as soon as the result is found.</p>




<h3>
    <font face="roboto slab" color="#666666" size="3">BAD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT name
    <br>FROM users
    <br>WHERE name NOT LIKE &#8220;F%&#8221;;
</p>


<h3>
    <font face="roboto slab" color="#666666" size="3">GOOD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT name
    <br>FROM users
    <br>WHERE name LIKE &#8220;M%&#8221;;
</p>




<p><u> <font face="roboto slab" color="#666666">Minimize the number of subqueries in your main query</font></u>.</p>




<h3>
    <font face="roboto slab" color="#666666" size="3">BAD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT name
    <br>FROM employee
    <br>WHERE salary = (SELECT MAX(salary) FROM employee_details)
    <br>AND age = (SELECT MAX(age) FROM employee_details)
    <br>AND emp_dept = &#8216;Electronics&#8217;;
</p>


<h3>
    <font face="roboto slab" color="#666666" size="3">GOOD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT name
    <br>FROM employee
    <br>WHERE (salary, age ) = (SELECT MAX (salary), MAX (age)
    <br>FROM employee_details)
    <br>AND dept = &#8216;Electronics&#8217;;
</p>




<p><u> <font face="roboto slab" color="#666666">Use EXIST instead of COUNT when trying to determine whether particular data exists</font></u>. The EXIST operator will stop once it finds the first record while the COUNT operator will search for all existing records on the table.</p>




<h3>
    <font face="roboto slab" color="#666666" size="3">BAD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT column
    <br>FROM table
    <br>WHERE COUNT(column) > 0
    <br>
</p>


<h3>
    <font face="roboto slab" color="#666666" size="3">GOOD</font>
</h3>


<p style="padding: 10px;background-color: #E0E0E0 ; font-family:Courier; border: black 0.5px solid">SELECT column
    <br>FROM table
    <br>WHERE EXISTS(SELECT * FROM customer
    <br>WHERE grade=3)
</p>




<p>Hopefully, these tips will help you get started in optimizing your SQL queries! For more, check out these resources:
</p>


<ul>
    <li><a href="http://hungred.com/useful-information/ways-optimize-sql-queries/" target="_blank">15 Ways to Optimize Your SQL Queries</a>
    </li>
    <br>
    <li><a href="http://dev.mysql.com/doc/refman/5.6/en/statement-optimization.html" target="_blank">Optimizing SQL Statements</a>
    </li>
    <br>
    <li><a href="http://beginner-sql-tutorial.com/sql-query-tuning.htm" target="_blank">SQL Tuning or SQL Optimization</a>
    </li>
    <br>
    <li><a href="http://www.bennadel.com/blog/1189-ben-nadel-s-easy-tips-for-writing-better-more-optimized-sql.htm" target="_blank">Ben Nadel&#8217;s Easy Tips For Writing Better, More Optimized SQL</li><br>
    <li><a href="http://www.serverwatch.com/tutorials/article.php/2175621/How-to-Optimize-Queries-Theory-an-Practice.htm" target="_blank">How to Optimize Queries (Theory in Practice)</a>
    </li>
</ul>


<p>&nbsp;
<small>
    <p>References:</p>
    <li>1) <a href="http://en.wikipedia.org/wiki/Query_optimization" target="_blank">Wikipedia: Query Optimization</a>
    </li>
    <br>
    <li>2) <a href="http://www.serverwatch.com/tutorials/article.php/2175621/How-to-Optimize-Queries-Theory-an-Practice.htm" target="_blank"> How to Optimize Queries Theory in Practice</a>
    </li>
    <br>
    <li>3) <a href="http://www.bennadel.com/blog/1189-ben-nadel-s-easy-tips-for-writing-better-more-optimized-sql.htm" target="_blank">Ben Nadel&rsquo;s Easy Tips for Writing Better, More Optimized SQL</a>
    </li>
    <br>
    <li>4) <a href="http://beginner-sql-tutorial.com/sql-query-tuning.htm" target="_blank">SQL Query Tuning</a>
    </li>
</small></p>
]]></content>
  </entry>
  
</feed>
