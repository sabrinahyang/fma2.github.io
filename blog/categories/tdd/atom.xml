<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | fmhub]]></title>
  <link href="http://fma2.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://fma2.github.io/"/>
  <updated>2014-08-23T20:10:15-04:00</updated>
  <id>http://fma2.github.io/</id>
  <author>
    <name><![CDATA[Farheen Malik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[test-driven development]]></title>
    <link href="http://fma2.github.io/blog/2014/06/14/wk-8-technical-test-driven-development/"/>
    <updated>2014-06-14T18:56:38-04:00</updated>
    <id>http://fma2.github.io/blog/2014/06/14/wk-8-technical-test-driven-development</id>
    <content type="html"><![CDATA[<p>Test-driven development (TDD) is &ldquo;a software development process that relies on the repetition of a very short development cycle&rdquo;<sup>1</sup>.</p>

<p><img border="0" src="http://upload.wikimedia.org/wikipedia/en/9/9c/Test-driven_development.PNG" alt="TDD Development Cycle">
<small>
    <center>A graphical representation of the development cycle, using a basic flowchart<sup>1</sup>
    </center>
</small></p>

<p>Generally speaking, the cycle includes the following steps:</p>

<p><li>(1) Decide what the code will do</li>
<li>(2) Write a test that will pass when the code runs</li>
<li>(3) Run the test, see it fail</li>
<li>(4) Write the code&ndash;just enough production code to fulfill the written test</li>
<li>(5) Run the test, see it pass</li>
<li>(6) Repeat the above process for every couple of lines of code <sup>2</sup>
</li></p>

<p>Some refer to the steps as RED, GREEN, and REFACTOR.</p>

<blockquote>
<li>1) Understand the requirements of the story, work item, or feature that you are working on.</li>
<li>2)
    <font color="red">Red</font>: Create a test and make it fail&#8211;it is expected for it to fail, as it ensures your code is working.</li>
<li>3)
<font color="green">Green</font>: Make the test pass by any means necessary. Write the production code to make the test pass. Keep it simple.</li>
<li>4)<font color="purple">Refactor</font>: Change the code to remove duplication in your project and to improve the design while ensuring that all tests still pass. Repeat the cycle. Each cycle should be very short, and a typical hour should contain many Red/Green/Refactor cycles<sup>3</sup>.</li>
</blockquote>


<p>Check out this video for more on this process:</p>

<iframe width="640" height="360" src="//www.youtube.com/embed/HhwElTL-mdI?rel=0" frameborder="0" allowfullscreen></iframe>


<p>As the video describes, TDD encourages design of testable code, which means better planning leading to better results. Amongst many uses, writing testable code through TDD forces the developer to break things down (i.e. code is modular), ensures code is not too tightly woven (referred to as decoupled design), and includes methods with limited scope.</p>

<h3>Benefits of TDD</h3>


<p><li>TDD enables the developer to take small steps when writing software. Many find this practice to be more productive than attempting to code in large steps. Further, it is easier to find and fix defects in code<sup>4</sup>.
</li>
<li>Each test provides feedback to the developer that each component is working.</li>
<li>The tests also provide documentation to the developer</li>
<li>After the test passes and the code is refactored, &ldquo;it is clear that the code is finished, and the developer can move on to a new test&rdquo; <sup>3</sup>
</li>
<li>Test-driven development forces critical analysis and design because the developer cannot create the production code without truly understanding what the desired result should be and how to test it <sup>3</sup>.
</li>
<li>Reduces debugging time.</li>
<li>Overall, advocates of TDD feel <u>it leads to better design in less time</u>.</li></p>

<h3>Objections to TDD</h3>


<p><li>To be able to write better code in less time, one needs to get used to TDD before he/she gets faster.</li>
<br>
<li>The basic steps are easy to learn but the mindset takes a while to sink in. And, before it sinks in, &ldquo;TDD will likely seem clumsy, slow, and awkward&rdquo;<sup>5</sup>. It may take 2 to 3 months of full-time TDD use to adapt.</li>
<br>
<li>It promotes microdesign over macrodesign and can be hard to apply in practice<sup>6</sup>. <a href="http://beust.com/weblog/2014/05/11/the-pitfalls-of-test-driven-development/" alt="Pitfalls of Test Driven Development" target="_blank">Here</a> is an interesting blog post on these points.</li></p>

<p><small>
References:
<li>1) <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Wikipedia: Test-Driven Development</a>
</li>
<li>2) <a href="http://www.youtube.com/watch?v=HhwElTL-mdI" target="_blank"> VIDEO: Test-driven development: Write better code in less time</a>
</li>
<li>3) <a href="http://msdn.microsoft.com/en-us/library/aa730844(v=vs.80).aspx" target="_blank">Guidelines for Test-Driven Development</a>
</li>
<li>4) <a href="http://www.agiledata.org/essays/tdd.html#sthash.yRGxurFo.dpuf" target="_blank">Introduction to Test Driven Development (TDD)</a>
</li>
<li>5) <a href="http://www.jamesshore.com/Agile-Book/test_driven_development.html" target="_blank">Test-Driven Development</a>
</li>
<li>6) <a href="http://beust.com/weblog/2014/05/11/the-pitfalls-of-test-driven-development/" target="_blank">The pitfalls of Test-Driven Development/a></li></p>
]]></content>
  </entry>
  
</feed>
